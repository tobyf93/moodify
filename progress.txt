TODO:
- Look into using react router to navigate between pages instead of having logic
  in multiple components that decide what to show and not show.
- Create 'pages' that use reusable components and use constructor to determine whether this is the correct route the user should be on.

using Node 4.4.6

8/9/2016:
- Got caught out by browserHistory and my backend.  By default webpack doesn't allow
traffic that hasn't been explicitly allowed e.g. localhost:3000/fetch, one of our
react-router routes.  This was solved by allowing all * GET requests to hit our index.html 


5/8/2016:
- Introducing routes (all stubbed currently)

5/7/2016:
- Now using Spotify's web API instead of making calls from backend.  This makes
  processing quicker as it only has to do one jump to the Spotify endpoints instead
  of two.  Also means we can avoid the Express server queuing requests as requests
  are now done by clients.
- Using co-routines, generators and promises to make async code easier to follow
- Displaying a moods list with number of tracks from each mood shown.  Thinking of
  making this list expandable (to view individual tracks) rather than making a
  separate tracks list.
- List item component is now more generic so that it can be used with both playlist
  list and mood list.

1/7/2016:
- Successfully processing the FIRST playlist sent to server
- Using reselect to calculate a derivedState to be used across the app

29/6/2016:
- Moods working with limited number of tracks
- Need a way of accessing tracks array in getPlaylistTracks AND getAudioFeatures

26/6/2016:
- Using Spotify's /v1/audio-features endpoint to get track energy and valence.
  This is not included in the spotify-web-api-node library so it might be worth
  contributing to that.
- Currently only analysing first 20 tracks of first playlist.  Will need to
  revisit how to chain promises together in a for loop.

25/6/2016:
- Spotify now has an audio features endpoint that returns energy and valence.
  Weird thing is you have to pass in track ID's via a url param.  URL's have a
  length limit so i'm going to batch 20 tracks at a time.

24/6/2016:
- No longer using Bootstrap (not needed).  Instead using flexbox for application
  layout.  This has >90% browser support which i am more than happy with.
- Create analysePlaylists action in redux to send an array of playlist ID's to
  server.
- API server uses bodyParser to parse incoming JSON data to '/moods' route.
- getPlaylistTracks method called from the Spotify API to get tracks for each
  playlist.  Unfortunately i don't think there is a way of getting tracks for
  more than one playlist at a time.
